import { ModbusService } from "./modbus";
import { app, BrowserWindow } from "electron";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

class Main {
  private mainWindow: BrowserWindow;

  private modbusService: ModbusService;

  init() {
    this.modbusService = ModbusService.getInstance();

    app.on("ready", (): void => {
      this.createWindow();
    });

    app.on("window-all-closed", this.onWindowClosed);
    app.on("activate", this.onActivate);

    app.whenReady().then(() => {
      // initTray();
    });
  }

  // private initTray() {
  //   const iconImage = nativeImage.createFromPath(
  //     "./src/assets/icons/win/icon.ico"
  //   );
  //   const tray = new Tray(iconImage);
  //   const contextMenu = Menu.buildFromTemplate([
  //     {
  //       label: "program exit",
  //       type: "normal",
  //       click: () => {
  //         if (this.mainWindow.isEnabled()) this.mainWindow.destroy();
  //         app.quit();
  //       },
  //     },
  //   ]);
  //   tray.setToolTip("File-Watcher");
  //   tray.setTitle("File-Watcher");
  //   tray.setContextMenu(contextMenu);
  //   tray.on("click", () => {
  //     if (this.mainWindow != null) {
  //       if (!this.mainWindow.isVisible()) {
  //         this.mainWindow.show();
  //       }
  //     }
  //   });
  // }

  private onWindowClosed = (): void => {
    if (process.platform !== "darwin") {
      app.quit();
    }
  };

  private onActivate() {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      this.createWindow();
    }
  }

  private createWindow() {
    // const iconImage = nativeImage.createFromPath('../src/assets/icons/win/icon.ico');

    this.mainWindow = new BrowserWindow({
      height: 500,
      width: 650,
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false,
        nativeWindowOpen: true,
      },
      // icon: iconImage,
    });
    // and load the index.html of the app.
    this.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    this.mainWindow.setMenuBarVisibility(false);

    // Open the DevTools.
    this.mainWindow.webContents.openDevTools({ mode: "detach" });
    ModbusService.setContents(this.mainWindow.webContents);
    // this.mainWindow.on('close', (e) => {
    //   e.preventDefault();
    //   this.mainWindow.hide();
    // });

    //this.mainWindow.maximize();
  }
}

new Main().init();
